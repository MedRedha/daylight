= Daylight

Daylight is a ActiveRecordizes your ActiveResource objects.

== Client Setup

Install the gem:

    gem install daylight

(Or add it to your Bundler Gemfile)

Set up the gem in a Rails initializer on your application:
    Daylight::API.setup!({
      namespace: 'API',
      password:  'p4ssw0rd',
      endpoint:  'http://localhost',
      versions:  ['v1'],
      version:   'v1'
      timeout:   60  # in seconds
    })
The `endpoint` sets ActiveResource#site configuration.
The `password` is the HTTP Authentication password (if necessary).

Daylight assumes you're versioning your API, you can supply the `versions`
that are supported by your API and which `version` is active.

== Server Setup

Install the gem:

    gem install daylight

(Or add it to your Bundler Gemfile)

== API Client

Unlike typical ActiveResource clients, the Daylight API Client has been designed to be used similarly to ActiveRecord with scopes and the ability to chain queries.

    Daylight::Zone.all
    Daylight::Zone.where(code:'iad1')
    Daylight::Zone.internal # scope
    Daylight::Zone.find(1).tenants # associations

== Client Documentation Rails Engine

Daylight provides a Rails App Engine for autogenerated API documentation. All docs are created on the fly by examining your routes, controllers and ActiveRecord models.

Add this to +config\application.rb+:
    require 'daylight/documentation'

And mount it in your routes:
    mount Daylight::Documentation => '/docs/api'

== Daylight::Mock

Simple mocking framework that simplifies the process of writing tests for code that uses the Daylight client library.

Works with both Rspec and TestUnit/Minitest.

To start add this to your test_helper.rb or spec_helper.rb:

    Daylight::Mock.setup

The mock will simulate responses to calls so you don't have to stub out anything, especially not the HTTP calls themselves.
At the end of the test you can examine the calls that were made by calling *daylight_mock*.

For example, this call returns a list of all the updated calls made on a *Host* object:

    daylight_mock.updated(:host)

To get only the last request use:

    daylight_mock.last_updated(:host)

Supported Calls: *created, updated, associated, indexed, shown, deleted*

==== Each recorded request keeps some data to check against:
resource:: The resouce name
path_parts:: A Struct of the request's path split into resource parts (version, resource, id and associated)
path:: The request's path
response_body:: Daylight::Mock's response to the request
post_data:: The request's POST data
params:: The request's parsed parameters
action:: The request's action (:created, :updated, :associated...)
status:: Response status
target_object:: The target object response if available (e.g. the response object to a find(1) call)
request:: The raw request object
response:: The raw response object


==== Examples

    daylight_mock.updated(:host).count.must_equal 2

    daylight_mock.last_updated(:host).target_object.node_type.must_equal 'wibble'

    daylight_mock.last_created(:user).status.must_equal 201


== Separation of Concerns

* The server-side rails model is the canonical version of the object.
* The server-side model's serializer defines what parts of that model are exposed to the client.
* The controllers define what API actions can be performed on an object.
* The routes define what methods are available to the client.
* The client-side model is the client representation of the server-side model.
